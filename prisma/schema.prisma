// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ExperienceType {
  VOLUNTEER
  INTERNSHIP
  JOB
}

enum Type {
  PORTFOLIO
  EXPERICENCE
  PROJECT
  USER
  ACHIEVEMENT
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  first_name     String
  user_name      String
  last_name      String
  email          String
  phone_number   String
  img_id         String?
  password       String
  email_verified Boolean         @default(false)
  phone_verified Boolean         @default(false)
  create_at      DateTime        @default(now())
  last_update    DateTime        @default(now())
  code_verify    CodeVerify[]
  portfolio_data PortfolioData[]
  WebsiteDesign  WebsiteDesign[]

  @@unique([user_name])
  @@index([first_name, last_name])
  @@index([email])
  @@index([phone_number])
}

model PortfolioData {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  website_design_id String             @db.ObjectId
  website_design    WebsiteDesign      @relation(fields: [website_design_id], references: [id])
  user_id           String             @db.ObjectId
  user              User               @relation(fields: [user_id], references: [id])
  project           Project[]
  achievement       Achievement[]
  portfolio_content PortfolioContent[]
  experience        Experience[]
  portfolioImage    PortfolioImage[]
  title             String
  desciption        String
  create_at     DateTime        @default(now())
  last_update   DateTime        @default(now())
  @@index([user_id, website_design_id])
}

model WebsiteDesign {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  url_website   String
  PortfolioData PortfolioData[]
  create_at     DateTime        @default(now())
  last_update   DateTime        @default(now())
  creator_id    String          @db.ObjectId
  creator       User            @relation(fields: [creator_id], references: [id])
}

model Experience {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String         @db.ObjectId
  portfolioData    PortfolioData  @relation(fields: [portfolioData_id], references: [id])
  title            String
  description      String
  img_ids          String[]
  start_date       DateTime
  end_date         DateTime?
  company_url      String?
  skills           String[]
  role             String
  create_at        DateTime       @default(now())
  last_update      DateTime       @default(now())
  type             ExperienceType

  @@index([portfolioData_id])
}

model Project {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  tools            String[]
  project_type     String
  title            String
  description      String
  skills           String[]
  img_ids          String[]
  start_date       DateTime
  end_date         DateTime?
  project_url      String?
  create_at        DateTime      @default(now())
  last_update      DateTime      @default(now())

  @@index([portfolioData_id])
}

model Achievement {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  title            String
  description      String
  img_ids          String[]
  start_date       DateTime
  end_date         DateTime
  achievement_url  String?
  create_at        DateTime      @default(now())
  last_update      DateTime      @default(now())

  @@index([portfolioData_id])
}

model CodeVerify {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String   @db.ObjectId
  user      User     @relation(fields: [user_id], references: [id])
  create_at DateTime @default(now())
  used      Boolean  @default(false)
  code      String

  @@index([create_at, user_id])
}

model PortfolioContent {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  content          String
  place_id         String
  create_at        DateTime      @default(now())
  last_update      DateTime      @default(now())

  @@index([portfolioData_id])
}

model PortfolioImage {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  image_id         String
  image_name       String
  image_size       Int
  place_id         String
  create_at        DateTime      @default(now())
  last_update      DateTime      @default(now())

  @@index([portfolioData_id])
}
