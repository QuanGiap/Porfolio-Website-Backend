// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum MediaType {
  FACE_BOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  LEETCODE
  GITHUB
}

enum ToolType {
  REST_APIS
  GRAPHQL
  GRPC
  KONG
  DOCKER
  KUBERNETES
  JENKINS
  CIRCLECI
  TERRAFORM
  GOOGLE_CLOUD_PLATFORM
  AMAZON_WEB_SERVICES
  MICROSOFT_AZURE
  HEROKU
  MONGODB
  MYSQL
  POSTGRESQL
  REDIS
  NODE_JS
  DJANGO
  FLASK
  RUBY_ON_RAILS
  REACT
  ANGULAR
  VUE_JS
  BOOTSTRAP
  MUI
  ADOBE_PHOTOSHOP
  ADOBE_ILLUSTRATOR
  FIGMA
  SKETCH
  ADOBE_XD
  CANVA
  BEHANCE
  DRIBBBLE
  ADOBE_LIGHTROOM
  ADOBE_PREMIERE_PRO
  FINAL_CUT_PRO
  DA_VINCI_RESOLVE
  VSCO
  FLICKR
  VIMEO
  YOUTUBE
  WORDPRESS
  MEDIUM
  WIX
  SQUARESPACE
  GRAMMARLY
  SCRIVENER
  SUBSTACK
  GHOST
  PYTHON
  R
  JUPYTER_NOTEBOOKS
  TABLEAU
  POWER_BI
  GOOGLE_DATA_STUDIO
  APACHE_SPARK
  SQL
  GOOGLE_ANALYTICS
  SEM_RUSH
  AHREFS
  HOOTSUITE
  MAILCHIMP
  HUBSPOT
  BUFFER
  ABLETON_LIVE
  FL_STUDIO
  PRO_TOOLS
  LOGIC_PRO
  SOUNDCLOUD
  BANDCAMP
  SPOTIFY_FOR_ARTISTS
  AUTOCAD
  REVIT
  SKETCHUP
  BLENDER
  THREE_DS_MAX
  RHINO
  LUMION
  ARCHITECTURE_PORTFOLIO
  LINKEDIN
  POWERPOINT
  GOOGLE_SLIDES
  MICROSOFT_EXCEL
  ZOHO
  SLACK
  SALESFORCE
  TRELLO
}

enum ExperienceType {
  VOLUNTEER
  INTERNSHIP
  JOB
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  first_name     String
  last_name      String
  email          String
  phone_number   String
  password       String
  email_verified Boolean         @default(false)
  phone_verified Boolean         @default(false)
  created_at     DateTime        @default(now())
  media          Media[]
  code_verify    CodeVerify[]
  portfolio_data PortfolioData[]

  @@index([first_name, last_name])
  @@index([email])
  @@index([phone_number])
}

model PortfolioData {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  website_design_id String             @db.ObjectId
  website_design    WebsiteDesign      @relation(fields: [website_design_id], references: [id])
  user_id           String             @db.ObjectId
  user              User               @relation(fields: [user_id], references: [id])
  project           Project[]
  achievement       Achievement[]
  portfolio_content PortfolioContent[]
  Experience        Experience[]
  PortfolioImage    PortfolioImage[]

  @@index([user_id])
}

model WebsiteDesign {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  url_website   String
  PortfolioData PortfolioData[]
}

model Experience {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String         @db.ObjectId
  portfolioData    PortfolioData  @relation(fields: [portfolioData_id], references: [id])
  project_type     String
  title            String
  description      String
  url_imgs         String[]
  start_date       DateTime
  end_date         DateTime?
  company_url      String?
  skills           String[]
  role             String
  create_at        DateTime       @default(now())
  last_update      DateTime       @default(now())
  type             ExperienceType

  @@index([portfolioData_id])
}

model Project {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  tool_type        ToolType
  project_type     String
  title            String
  description      String
  url_imgs         String[]
  start_date       DateTime
  end_date         DateTime?
  project_url      String
  create_at        DateTime      @default(now())
  last_update      DateTime      @default(now())

  @@index([portfolioData_id])
}

model Achievement {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  role             String
  description      String
  url_imgs         String
  start_date       DateTime
  end_date         DateTime
  url              String
  create_at        DateTime      @default(now())
  last_update      DateTime      @default(now())

  @@index([portfolioData_id])
}

model Media {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  media_type  MediaType
  user_id     String    @db.ObjectId
  user        User      @relation(fields: [user_id], references: [id])
  media_url   String
  create_at   DateTime  @default(now())
  last_update DateTime  @default(now())
}

model CodeVerify {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String   @db.ObjectId
  user      User     @relation(fields: [user_id], references: [id])
  create_at DateTime @default(now())
  used      Boolean  @default(false)
  code      String

  @@index([create_at, user_id])
}

model PortfolioContent {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  content          String
  place_id         String

  @@index([portfolioData_id])
}

model PortfolioImage {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  portfolioData_id String        @db.ObjectId
  portfolioData    PortfolioData @relation(fields: [portfolioData_id], references: [id])
  imageId          String
  place_id         String

  @@index([portfolioData_id])
}
